
DECLARE TimeToStart EXTERNAL CHARACTER;
CREATE COMPUTE MODULE Supplier_Oracle_Flow_Compute1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
--		DECLARE jump INTERVAL;
--      SET jump = INTERVAL '60' SECOND;
--      DECLARE start TIME;
--      SET start = CURRENT_TIME + jump;
--		DECLARE MyTime TIME;
--		SET MyTime = TIME '09:00:00.001';
		
		SET OutputRoot = InputRoot;
		SET OutputLocalEnvironment.TimeoutRequest.Action = 'SET';
		SET OutputLocalEnvironment.TimeoutRequest.Identifier = 'START';
		
		IF CAST(((CURRENT_TIME - CAST(TimeToStart AS TIME))SECOND) AS INTEGER) <0 THEN
			SET OutputLocalEnvironment.TimeoutRequest.StartDate = 'TODAY';
		ELSE
			SET OutputLocalEnvironment.TimeoutRequest.StartDate = CURRENT_DATE + INTERVAL '1' DAY;
		END IF;
		
--		SET OutputLocalEnvironment.TimeoutRequest.StartDate = 'TODAY';
		SET OutputLocalEnvironment.TimeoutRequest.StartTime = 
			CAST(TimeToStart AS TIME);
--			MyTime;
--			'10.00';
--			start; 
--			CURRENT_TIME;
--			+ CAST(InputRoot.XMLNSC.Message.Delay AS INTERVAL SECOND);			
		SET OutputLocalEnvironment.TimeoutRequest.Interval = 43200;		
		SET OutputLocalEnvironment.TimeoutRequest.Count = -1;
		SET OutputLocalEnvironment.TimeoutRequest.IgnoreMissed = 'TRUE';
		SET OutputLocalEnvironment.TimeoutRequest.AllowOverwrite = 'TRUE';
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
